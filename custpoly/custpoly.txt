Define LibPub custpoly(a,b)=
Prgm
:zeronum:=zeros(a,x)
:zeronumlen:=dim(zeronum)
:
:zeroden:=zeros(b,x)
:zerodenlen:=dim(zeroden)
:
:Disp "NS Num Zeros",zeronum
:Disp "NS Den Zeros",zeroden
:
:Disp "NS All Zeros",zeros(((a)/(b)),x)
:
:If zerodenlen=0 Then
:    Disp "Def R \ { None }"
:    Else
:
:    Disp "Def R \ ",zeroden
:
:    fix:={}
:    fixcount:=1
:    For z,1,zerodenlen,1
:    For t,1,zeronumlen,1
:       If zeroden[z]=zeronum[t] Then
:             fix[fixcount]:=zeroden[z]
:                   fixcount:=fixcount+1
:             EndIf
:             EndFor
:             EndFor
:
:             nonfix:={}
:             nonfixcount:=1
:             For z,1,zerodenlen,1
:             hit:=0
:             For t,1,fixcount-1,1
:                If zeroden[z]=fix[t] Then
:                         hit:=1
:                EndIf
:                EndFor
:                If hit=0 Then
:                nonfix[nonfixcount]:=zeroden[z]
:                nonfixcount:=nonfixcount+1
:                EndIf
:                EndFor
:                Disp "Fixable ",fix
:                Disp "Pol ",nonfix
:
:
:                EndIf
:
:                asy:=polyQuotient(a,b)
:                If string(asy)="0" Then
:                Disp "Asy x-Axis"
:                Else
:                Disp "Asy",asy
:                EndIf
:
:                temp1:=expand(a)
:                temp2:=expand(b)
:                temp3=asy
:
:
:
:
:                  f1(x):=((expr(string(temp1)))/(expr(string(temp2))))
:
:                     f2(x):=expr(string(asy))
:
:Disp "-----Manual Calc-----"
:
:Disp "(",a,") ÷ (",b,") = ",asy,"Rest ",polyRemainder(a,b)
: polycf:=polyCoeffs(asy)
: polycfcount:=dim(polycf)
:
:currentasy:=a
:
:For z,1,polycfcount,1
:
:curritem:=polycf[z]
:currval:=expand(b*curritem*x^(polycfcount-z))
:Disp "-(",currval,")"
:Disp "________"
:currentasy:=currentasy-currval
:
:If z=polycfcount Then
:
:Disp "Rest: ",currentasy
:Else
:Disp currentasy
:EndIf
:EndFor
:
:
:
:EndPrgm